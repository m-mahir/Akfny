// <auto-generated />
using System;
using Akfny.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AkfnyData.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210922203409_Migrator20210922")]
    partial class Migrator20210922
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AkfnyData.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("PMPId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PMPId");

                    b.HasIndex("TrainerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Data.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("AdminImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int");

                    b.Property<int?>("IsDelete")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Data.Entities.AuthorityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AuthorityTypes");
                });

            modelBuilder.Entity("Data.Entities.CSLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoordinatorLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseProfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LocPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LocationRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorLocationId");

                    b.HasIndex("CourseProfferId");

                    b.HasIndex("LocationRoomId");

                    b.HasIndex("PriceTypeId");

                    b.ToTable("CSLocations");
                });

            modelBuilder.Entity("Data.Entities.CSLocation_Temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoordinatorLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseProfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<decimal?>("LocPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LocationRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("locId")
                        .HasColumnType("int");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorLocationId");

                    b.HasIndex("CourseProfferId");

                    b.HasIndex("LocationRoomId");

                    b.HasIndex("PriceTypeId");

                    b.ToTable("CSLocation_Temp");
                });

            modelBuilder.Entity("Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ECityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Data.Entities.ContentManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentManagementEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ContentManagementImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentManagementName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContentManagements");
                });

            modelBuilder.Entity("Data.Entities.Coordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorityNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AuthorityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CoordinatorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinatorName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CountryOfGraduation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<string>("Headquarters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDType")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDimage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspend")
                        .HasColumnType("int");

                    b.Property<string>("JawwalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photograph")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("QualificationDefineId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rooms")
                        .HasColumnType("int");

                    b.Property<string>("SecondarySpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<string>("TheUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("NumberTypeId");

                    b.HasIndex("QualificationDefineId");

                    b.HasIndex("SexId");

                    b.ToTable("Coordinators");
                });

            modelBuilder.Entity("Data.Entities.CoordinatorCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoordinatorId")
                        .HasColumnType("int");

                    b.Property<string>("CourseNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.ToTable("CoordinatorCourses");
                });

            modelBuilder.Entity("Data.Entities.CoordinatorLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("GMName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GMPhone")
                        .HasColumnType("int");

                    b.Property<string>("LocationEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("classification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("coordinatorId")
                        .HasColumnType("int");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("latlng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("coordinatorId");

                    b.ToTable("CoordinatorLocations");
                });

            modelBuilder.Entity("Data.Entities.CoordinatorUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoordinatorId")
                        .HasColumnType("int");

                    b.Property<string>("CoordinatorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinatorUserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.ToTable("CoordinatorUsers");
                });

            modelBuilder.Entity("Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ECountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Data.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Course_Img")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Detailed_Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_CourseTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_Detailed_Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_General_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_The_main_axis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("General_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Hour")
                        .HasColumnType("int");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("Targeted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("The_main_axis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("SectorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Data.Entities.CourseBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BookRead")
                        .HasColumnType("bit");

                    b.Property<string>("BookingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BookingMax")
                        .HasColumnType("int");

                    b.Property<string>("BookingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseProfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Jawwal")
                        .HasColumnType("int");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseBookings");
                });

            modelBuilder.Entity("Data.Entities.CourseBookingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BookRead")
                        .HasColumnType("bit");

                    b.Property<string>("BookingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BookingMax")
                        .HasColumnType("int");

                    b.Property<string>("BookingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Jawwal")
                        .HasColumnType("int");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuggestedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseBookingRequests");
                });

            modelBuilder.Entity("Data.Entities.CourseProffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcceptRejectDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcceptRejectNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcceptRejectTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Brochures")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CS_Finish")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CoordinatorLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId1")
                        .HasColumnType("int");

                    b.Property<string>("FinanceDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinanceId")
                        .HasColumnType("int");

                    b.Property<string>("FinanceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FinanceSubmit")
                        .HasColumnType("bit");

                    b.Property<string>("FinanceTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForwardCoordinator")
                        .HasColumnType("bit");

                    b.Property<string>("ForwardCoordinatorDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ForwardCoordinatorId")
                        .HasColumnType("int");

                    b.Property<string>("ForwardCoordinatorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForwardCoordinatorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForwardFinance")
                        .HasColumnType("bit");

                    b.Property<string>("ForwardFinanceDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ForwardFinanceId")
                        .HasColumnType("int");

                    b.Property<string>("ForwardFinanceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForwardFinanceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForwardPMP")
                        .HasColumnType("bit");

                    b.Property<string>("ForwardPMPDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ForwardPMPId")
                        .HasColumnType("int");

                    b.Property<string>("ForwardPMPNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForwardPMPType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GMId")
                        .HasColumnType("int");

                    b.Property<bool?>("GMSubmit")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLec")
                        .HasColumnType("bit");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("LocPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfTrainees")
                        .HasColumnType("int");

                    b.Property<string>("PMPDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PMPId")
                        .HasColumnType("int");

                    b.Property<string>("PMPNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PMPSubmit")
                        .HasColumnType("bit");

                    b.Property<string>("PMPTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PriceTrainer")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PriceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfferStatuId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewJawwal")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SuggestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimeFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeFrom2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("coordinatorDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("coordinatorId")
                        .HasColumnType("int");

                    b.Property<string>("coordinatorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("coordinatorSubmit")
                        .HasColumnType("bit");

                    b.Property<string>("coordinatorTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("locId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CoordinatorLocationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("FinanceId");

                    b.HasIndex("GMId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("LocationRoomId");

                    b.HasIndex("PMPId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ProfferStatuId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("coordinatorId");

                    b.ToTable("CourseProffers");
                });

            modelBuilder.Entity("Data.Entities.CourseSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Detailed_Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_CourseTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_Detailed_Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_General_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_The_main_axis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("General_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Hour")
                        .HasColumnType("int");

                    b.Property<string>("LecturerDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("LecturerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PMPDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PMPId")
                        .HasColumnType("int");

                    b.Property<string>("PMPNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PMPSubmit")
                        .HasColumnType("bit");

                    b.Property<string>("PMPTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfferStatuId")
                        .HasColumnType("int");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("The_main_axis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("PMPId");

                    b.HasIndex("ProfferStatuId");

                    b.HasIndex("SectorId");

                    b.ToTable("CourseSuggestions");
                });

            modelBuilder.Entity("Data.Entities.CourseTargeted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<int?>("MajorInterestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Num")
                        .HasColumnType("int");

                    b.Property<int?>("SubInterestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MajorInterestId");

                    b.HasIndex("SubInterestId");

                    b.ToTable("CourseTargeteds");
                });

            modelBuilder.Entity("Data.Entities.CourseTargetedFinal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<int?>("MajorInterestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Num")
                        .HasColumnType("int");

                    b.Property<int?>("SubInterestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("MajorInterestId");

                    b.HasIndex("SubInterestId");

                    b.ToTable("CourseTargetedFinals");
                });

            modelBuilder.Entity("Data.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinanceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Data.Entities.DevelopCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Detailed_Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DevelopCourseField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DevelopCourseSector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DevelopCourseTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_Detailed_Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_DevelopCourseTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_General_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_The_main_axis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("General_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Hour")
                        .HasColumnType("int");

                    b.Property<string>("LecturerDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("LecturerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PMPSubmit")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfferStatuId")
                        .HasColumnType("int");

                    b.Property<string>("SectorSupervisorDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectorSupervisorId")
                        .HasColumnType("int");

                    b.Property<string>("SectorSupervisorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectorSupervisorTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("The_main_axis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("ProfferStatuId");

                    b.HasIndex("SectorSupervisorId");

                    b.ToTable("DevelopCourses");
                });

            modelBuilder.Entity("Data.Entities.EmailsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SDay")
                        .HasColumnType("int");

                    b.Property<int?>("SMonth")
                        .HasColumnType("int");

                    b.Property<int?>("SYear")
                        .HasColumnType("int");

                    b.Property<string>("Send")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SendById")
                        .HasColumnType("int");

                    b.Property<string>("SendTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailsLogs");
                });

            modelBuilder.Entity("Data.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("E_FieldTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_Field_Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field_Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Data.Entities.Finance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinanceUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Finances");
                });

            modelBuilder.Entity("Data.Entities.GM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GMName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GMPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GMUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("GMs");
                });

            modelBuilder.Entity("Data.Entities.Greet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("GreetActive")
                        .HasColumnType("bit");

                    b.Property<string>("GreetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Greets");
                });

            modelBuilder.Entity("Data.Entities.Inquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InquiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InquiryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquiryMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquiryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("InquiryRead")
                        .HasColumnType("bit");

                    b.Property<string>("InquiryReplay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InquiryReplayBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InquiryReplayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InquiryReplayTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquirySubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquiryTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquiryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Inquiries");
                });

            modelBuilder.Entity("Data.Entities.Lecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ELecturerFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ELecturerLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ELecturerSname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ELecturerTname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fieldofexpertise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvitationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuspend")
                        .HasColumnType("bit");

                    b.Property<string>("JawwalNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JawwalNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LecturerId1")
                        .HasColumnType("int");

                    b.Property<int?>("LecturerId2")
                        .HasColumnType("int");

                    b.Property<string>("LecturerLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerSname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerTname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photograph")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationInvitationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<string>("SubFieldofexpertise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubTheNumberOfYears")
                        .HasColumnType("int");

                    b.Property<int?>("TheNumberOfYears")
                        .HasColumnType("int");

                    b.Property<string>("UploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LecturerId1");

                    b.HasIndex("LecturerId2");

                    b.HasIndex("NationalityId");

                    b.HasIndex("NumberTypeId");

                    b.HasIndex("SexId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("Data.Entities.LecturerArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Courses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Jawwal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workplace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LecturerArchives");
                });

            modelBuilder.Entity("Data.Entities.LecturerCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LecturerCertificateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("LecturerCertificateImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LecturerCertificateTital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturerCertificates");
                });

            modelBuilder.Entity("Data.Entities.LecturerCertificateTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LecturerCertificateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("LecturerCertificateImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LecturerCertificateTital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LecturerCertificateTemps");
                });

            modelBuilder.Entity("Data.Entities.LecturerInterestedCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturerInterestedCourses");
                });

            modelBuilder.Entity("Data.Entities.LecturerInterestedCourseTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("LecturerInterestedCourseTemps");
                });

            modelBuilder.Entity("Data.Entities.LecturerQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryOfGraduation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("MajorSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QualificationDefineId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<string>("SecondarySpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("QualificationDefineId");

                    b.ToTable("LecturerQualifications");
                });

            modelBuilder.Entity("Data.Entities.LecturerQualificationTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryOfGraduation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<string>("MajorSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QualificationDefineId")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<string>("SecondarySpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QualificationDefineId");

                    b.ToTable("LecturerQualificationTemps");
                });

            modelBuilder.Entity("Data.Entities.LecturerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("LecturerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerUserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturerUsers");
                });

            modelBuilder.Entity("Data.Entities.LocationRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cafe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CapacityFrom")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityTo")
                        .HasColumnType("int");

                    b.Property<int?>("CoordinatorLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Ranking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RoomPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomView")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shape")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("locId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorLocationId");

                    b.ToTable("LocationRooms");
                });

            modelBuilder.Entity("Data.Entities.LocationRoomImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RoomImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationRoomId");

                    b.ToTable("LocationRoomImages");
                });

            modelBuilder.Entity("Data.Entities.LocationRoomImageTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RoomImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("LocationRoomImageTemps");
                });

            modelBuilder.Entity("Data.Entities.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeTxt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("Data.Entities.LoginAdminType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LoginAdminType1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LoginAdminTypes");
                });

            modelBuilder.Entity("Data.Entities.LoginTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoginTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LoginTrackings");
                });

            modelBuilder.Entity("Data.Entities.LoginType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginType1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LoginTypes");
                });

            modelBuilder.Entity("Data.Entities.MajorInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("E_MajorInterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorInterestTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MajorInterests");
                });

            modelBuilder.Entity("Data.Entities.MsgType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MsgTypeTxt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MsgTypes");
                });

            modelBuilder.Entity("Data.Entities.MyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFinsh")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("TaskEnd")
                        .HasColumnType("bit");

                    b.Property<int?>("TaskFrom")
                        .HasColumnType("int");

                    b.Property<byte[]>("TaskImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TaskNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskPeriod")
                        .HasColumnType("int");

                    b.Property<string>("TaskPriority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskProgress")
                        .HasColumnType("int");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskTo")
                        .HasColumnType("int");

                    b.Property<string>("TimeFinsh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MyTasks");
                });

            modelBuilder.Entity("Data.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ENationalityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalityType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Data.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("NewsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NewsBoday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsBrief")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("NewsDelete")
                        .HasColumnType("bit");

                    b.Property<byte[]>("NewsImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NewsSubject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Data.Entities.NumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NumberTypes");
                });

            modelBuilder.Entity("Data.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Auth")
                        .HasColumnType("bit");

                    b.Property<byte[]>("CR")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headquarters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("InfoUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("InvitationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuspend")
                        .HasColumnType("bit");

                    b.Property<string>("Jawal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrgName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photograph")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleManagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Data.Entities.OrganizationCourseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ReqDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReqNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReqStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ReqTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuggestedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuggestedTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CourseId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationCourseRequests");
                });

            modelBuilder.Entity("Data.Entities.OrganizationCourseRequestTrainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CRid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrganizationCourseRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationCourseRequestId");

                    b.HasIndex("TrainerId");

                    b.ToTable("OrganizationCourseRequestTrainers");
                });

            modelBuilder.Entity("Data.Entities.OrganizationCourseRequestTrainerTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrgId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("OrganizationCourseRequestTrainerTemps");
                });

            modelBuilder.Entity("Data.Entities.OrganizationOfficer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficerJawwal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationOfficers");
                });

            modelBuilder.Entity("Data.Entities.PMP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PMPName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PMPPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PMPUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("PMPs");
                });

            modelBuilder.Entity("Data.Entities.PriceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PriceTxt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PriceTypes");
                });

            modelBuilder.Entity("Data.Entities.ProfferStatu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfferStatus");
                });

            modelBuilder.Entity("Data.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchesNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CR")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CallAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseArcheived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoundationYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvitationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuspend")
                        .HasColumnType("bit");

                    b.Property<string>("Jawwal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("License")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photograph")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkHoursFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkHoursTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Data.Entities.ProviderAccreditation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accreditation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProivderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderAccreditations");
                });

            modelBuilder.Entity("Data.Entities.ProviderAccreditationTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accreditation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProviderAccreditationTemps");
                });

            modelBuilder.Entity("Data.Entities.ProviderCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Course_Img")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detailed_Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EtmadFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EtmadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("General_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("The_main_axis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderCourses");
                });

            modelBuilder.Entity("Data.Entities.ProviderField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Field")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderFields");
                });

            modelBuilder.Entity("Data.Entities.ProviderFieldsTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Field")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProviderFieldsTemps");
                });

            modelBuilder.Entity("Data.Entities.QualificationDefine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QualificationType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QualificationDefines");
                });

            modelBuilder.Entity("Data.Entities.RegistrationCourseProffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseProfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPayment")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaymentDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PaymentImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal?>("PaymentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaymentTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PriceAfertDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPriceTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseProfferId");

                    b.HasIndex("TrainerId");

                    b.ToTable("RegistrationCourseProffers");
                });

            modelBuilder.Entity("Data.Entities.RegistrationSuggestionCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SectorId");

                    b.ToTable("RegistrationSuggestionCourses");
                });

            modelBuilder.Entity("Data.Entities.RegistrationSuggestionCourseTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("SectorId");

                    b.ToTable("RegistrationSuggestionCourseTemps");
                });

            modelBuilder.Entity("Data.Entities.SSectorList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("SectorSupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.HasIndex("SectorSupervisorId");

                    b.ToTable("SSectorLists");
                });

            modelBuilder.Entity("Data.Entities.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DisplayHome")
                        .HasColumnType("bit");

                    b.Property<string>("E_SectorI_Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E_SectorTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectorI_Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectorTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("icon")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Data.Entities.SectorSupervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVOriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractOriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDType")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDimage")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NumberTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalUploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<bool?>("ReciveRequist")
                        .HasColumnType("bit");

                    b.Property<string>("SectorSupervisorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("SectorSupervisorImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SectorSupervisorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NumberTypeId");

                    b.ToTable("SectorSupervisors");
                });

            modelBuilder.Entity("Data.Entities.SectorSupervisorCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("SectorSupervisorCertificateImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SectorSupervisorCertificateTital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectorSupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorSupervisorId");

                    b.ToTable("SectorSupervisorCertificates");
                });

            modelBuilder.Entity("Data.Entities.SectorSupervisorInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstitutionContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SectorSupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorSupervisorId");

                    b.ToTable("SectorSupervisorInstitutions");
                });

            modelBuilder.Entity("Data.Entities.SectorSupervisorInstitutionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SectorSupervisorId")
                        .HasColumnType("int");

                    b.Property<int?>("SectorSupervisorInstitutionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SectorSupervisorId");

                    b.HasIndex("SectorSupervisorInstitutionId");

                    b.ToTable("SectorSupervisorInstitutionDetails");
                });

            modelBuilder.Entity("Data.Entities.SelectedLecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseProfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("LecturerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PriceTemp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SelectPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Updated")
                        .HasColumnType("bit");

                    b.Property<bool?>("finish")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseProfferId");

                    b.HasIndex("LecturerId");

                    b.ToTable("SelectedLecturers");
                });

            modelBuilder.Entity("Data.Entities.SelectedLecturerTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseProfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("LecturerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PriceTemp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SelectPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseProfferId");

                    b.HasIndex("LecturerId");

                    b.ToTable("SelectedLecturerTemps");
                });

            modelBuilder.Entity("Data.Entities.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SexType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("Data.Entities.Slideshow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlideshowBtnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("SlideshowImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SlideshowLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlideshowName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("btnTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("btnTypeId");

                    b.ToTable("Slideshows");
                });

            modelBuilder.Entity("Data.Entities.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Google")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("Data.Entities.SpecialTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Jawwal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("MsgRead")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpecialTrainings");
                });

            modelBuilder.Entity("Data.Entities.SubInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("E_SubInterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MajorInterestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubInterestTxt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MajorInterestId");

                    b.ToTable("SubInterests");
                });

            modelBuilder.Entity("Data.Entities.Subscribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("subscribeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("subscribeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subscribeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subscribeTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscribes");
                });

            modelBuilder.Entity("Data.Entities.TaskNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FromId")
                        .HasColumnType("int");

                    b.Property<string>("FromType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MyTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyTaskId");

                    b.ToTable("TaskNotes");
                });

            modelBuilder.Entity("Data.Entities.TaskProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseProfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinanceId")
                        .HasColumnType("int");

                    b.Property<int?>("GMId")
                        .HasColumnType("int");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PMPId")
                        .HasColumnType("int");

                    b.Property<string>("Progress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgressDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgressTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("coordinatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseProfferId");

                    b.HasIndex("FinanceId");

                    b.HasIndex("GMId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("PMPId");

                    b.ToTable("TaskProgresses");
                });

            modelBuilder.Entity("Data.Entities.TermsAndCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TC_Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TC_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TermsAndConditions");
                });

            modelBuilder.Entity("Data.Entities.TraineeDelete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TraineeDeletes");
                });

            modelBuilder.Entity("Data.Entities.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddId")
                        .HasColumnType("int");

                    b.Property<string>("AddType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ETrainerFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETrainerLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETrainerSname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETrainerTname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvitationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("IsSend")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSuspend")
                        .HasColumnType("bit");

                    b.Property<string>("JawwalNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JawwalNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photograph")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("ProfileUpdate")
                        .HasColumnType("bit");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationInvitationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<string>("TotalMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerSname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerTname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("NumberTypeId");

                    b.HasIndex("SexId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("Data.Entities.TrainerInquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseProfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InquiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquiryMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("InquiryRead")
                        .HasColumnType("bit");

                    b.Property<string>("InquiryReplay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InquiryReplayBy")
                        .HasColumnType("int");

                    b.Property<string>("InquiryReplayDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquiryReplayTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquirySubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquiryTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseProfferId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerInquiries");
                });

            modelBuilder.Entity("Data.Entities.TrainerInterested", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MajorInterestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<int?>("SubInterestId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MajorInterestId");

                    b.HasIndex("SubInterestId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerInteresteds");
                });

            modelBuilder.Entity("Data.Entities.TrainerInterestedCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerInterestedCourses");
                });

            modelBuilder.Entity("Data.Entities.TrainerInterestedCourseTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TrainerInterestedCourseTemps");
                });

            modelBuilder.Entity("Data.Entities.TrainerInterestedTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MajorInterestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<int?>("SubInterestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MajorInterestId");

                    b.HasIndex("SubInterestId");

                    b.ToTable("TrainerInterestedTemps");
                });

            modelBuilder.Entity("Data.Entities.TrainerOtherInterestedCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerOtherInterestedCourses");
                });

            modelBuilder.Entity("Data.Entities.TrainerOtherInterestedCourseTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegistrationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TrainerOtherInterestedCourseTemps");
                });

            modelBuilder.Entity("Data.Entities.TrainerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerUserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerUsers");
                });

            modelBuilder.Entity("Data.Entities.TrineeCourseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReqDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReqNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReqStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ReqTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuggestedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuggestedTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrineeCourseRequests");
                });

            modelBuilder.Entity("Data.Entities.album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("albumDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("albumName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("albums");
                });

            modelBuilder.Entity("Data.Entities.albumList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("albumId")
                        .HasColumnType("int");

                    b.Property<byte[]>("albumImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("albumImgDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("albumId");

                    b.ToTable("albumLists");
                });

            modelBuilder.Entity("Data.Entities.btnType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("btnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("btnValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("btnTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AkfnyData.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("Data.Entities.PMP", "PMP")
                        .WithMany()
                        .HasForeignKey("PMPId");

                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.CSLocation", b =>
                {
                    b.HasOne("Data.Entities.CoordinatorLocation", "CoordinatorLocation")
                        .WithMany("CSLocations")
                        .HasForeignKey("CoordinatorLocationId");

                    b.HasOne("Data.Entities.CourseProffer", "CourseProffer")
                        .WithMany("CSLocations")
                        .HasForeignKey("CourseProfferId");

                    b.HasOne("Data.Entities.LocationRoom", "LocationRoom")
                        .WithMany("CSLocations")
                        .HasForeignKey("LocationRoomId");

                    b.HasOne("Data.Entities.PriceType", "PriceType")
                        .WithMany("CSLocations")
                        .HasForeignKey("PriceTypeId");
                });

            modelBuilder.Entity("Data.Entities.CSLocation_Temp", b =>
                {
                    b.HasOne("Data.Entities.CoordinatorLocation", "CoordinatorLocation")
                        .WithMany("CSLocation_Temp")
                        .HasForeignKey("CoordinatorLocationId");

                    b.HasOne("Data.Entities.CourseProffer", "CourseProffer")
                        .WithMany("CSLocation_Temp")
                        .HasForeignKey("CourseProfferId");

                    b.HasOne("Data.Entities.LocationRoom", "LocationRoom")
                        .WithMany("CSLocation_Temp")
                        .HasForeignKey("LocationRoomId");

                    b.HasOne("Data.Entities.PriceType", "PriceType")
                        .WithMany("CSLocation_Temp")
                        .HasForeignKey("PriceTypeId");
                });

            modelBuilder.Entity("Data.Entities.City", b =>
                {
                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Data.Entities.Coordinator", b =>
                {
                    b.HasOne("Data.Entities.AuthorityType", "AuthorityType")
                        .WithMany("Coordinators")
                        .HasForeignKey("AuthorityTypeId");

                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("Coordinators")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("Coordinators")
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.Entities.Nationality", "Nationality")
                        .WithMany("Coordinators")
                        .HasForeignKey("NationalityId");

                    b.HasOne("Data.Entities.NumberType", "NumberType")
                        .WithMany("Coordinators")
                        .HasForeignKey("NumberTypeId");

                    b.HasOne("Data.Entities.QualificationDefine", "QualificationDefine")
                        .WithMany("Coordinators")
                        .HasForeignKey("QualificationDefineId");

                    b.HasOne("Data.Entities.Sex", "Sex")
                        .WithMany("Coordinators")
                        .HasForeignKey("SexId");
                });

            modelBuilder.Entity("Data.Entities.CoordinatorCourse", b =>
                {
                    b.HasOne("Data.Entities.Coordinator", "Coordinator")
                        .WithMany("CoordinatorCourses")
                        .HasForeignKey("CoordinatorId");
                });

            modelBuilder.Entity("Data.Entities.CoordinatorLocation", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("CoordinatorLocations")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("CoordinatorLocations")
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.Entities.LocationType", "LocationType")
                        .WithMany("CoordinatorLocations")
                        .HasForeignKey("LocationTypeId");

                    b.HasOne("Data.Entities.Provider", "Provider")
                        .WithMany("CoordinatorLocations")
                        .HasForeignKey("ProviderId");

                    b.HasOne("Data.Entities.Coordinator", "Coordinator")
                        .WithMany("CoordinatorLocations")
                        .HasForeignKey("coordinatorId");
                });

            modelBuilder.Entity("Data.Entities.CoordinatorUser", b =>
                {
                    b.HasOne("Data.Entities.Coordinator", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId");
                });

            modelBuilder.Entity("Data.Entities.Course", b =>
                {
                    b.HasOne("Data.Entities.Field", "Field")
                        .WithMany("Courses")
                        .HasForeignKey("FieldId");

                    b.HasOne("Data.Entities.Sector", "Sector")
                        .WithMany("Courses")
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("Data.Entities.CourseBookingRequest", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("CourseBookingRequests")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("Data.Entities.CourseProffer", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("CourseProffers")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.CoordinatorLocation", "CoordinatorLocation")
                        .WithMany("CourseProffers")
                        .HasForeignKey("CoordinatorLocationId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("CourseProffers")
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("CourseProffers")
                        .HasForeignKey("CourseId");

                    b.HasOne("Data.Entities.Currency", "Currency")
                        .WithMany("CourseProffers")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Data.Entities.Currency", "Currency1")
                        .WithMany("CourseProffers1")
                        .HasForeignKey("CurrencyId1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Data.Entities.Finance", "Finance")
                        .WithMany("CourseProffers")
                        .HasForeignKey("FinanceId");

                    b.HasOne("Data.Entities.GM", "GM")
                        .WithMany("CourseProffers")
                        .HasForeignKey("GMId");

                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("CourseProffers")
                        .HasForeignKey("LecturerId");

                    b.HasOne("Data.Entities.LocationRoom", "LocationRoom")
                        .WithMany("CourseProffers")
                        .HasForeignKey("LocationRoomId");

                    b.HasOne("Data.Entities.PMP", "PMP")
                        .WithMany("CourseProffers")
                        .HasForeignKey("PMPId");

                    b.HasOne("Data.Entities.PriceType", "PriceType")
                        .WithMany("CourseProffers")
                        .HasForeignKey("PriceTypeId");

                    b.HasOne("Data.Entities.ProfferStatu", "ProfferStatu")
                        .WithMany("CourseProffers")
                        .HasForeignKey("ProfferStatuId");

                    b.HasOne("Data.Entities.Provider", "Provider")
                        .WithMany("CourseProffers")
                        .HasForeignKey("ProviderId");

                    b.HasOne("Data.Entities.Coordinator", "Coordinator")
                        .WithMany("CourseProffers")
                        .HasForeignKey("coordinatorId");
                });

            modelBuilder.Entity("Data.Entities.CourseSuggestion", b =>
                {
                    b.HasOne("Data.Entities.Field", "Field")
                        .WithMany("CourseSuggestions")
                        .HasForeignKey("FieldId");

                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("CourseSuggestions")
                        .HasForeignKey("LecturerId");

                    b.HasOne("Data.Entities.PMP", "PMP")
                        .WithMany("CourseSuggestions")
                        .HasForeignKey("PMPId");

                    b.HasOne("Data.Entities.ProfferStatu", "ProfferStatu")
                        .WithMany("CourseSuggestions")
                        .HasForeignKey("ProfferStatuId");

                    b.HasOne("Data.Entities.Sector", "Sector")
                        .WithMany("CourseSuggestions")
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("Data.Entities.CourseTargeted", b =>
                {
                    b.HasOne("Data.Entities.MajorInterest", "MajorInterest")
                        .WithMany("CourseTargeteds")
                        .HasForeignKey("MajorInterestId");

                    b.HasOne("Data.Entities.SubInterest", "SubInterest")
                        .WithMany("CourseTargeteds")
                        .HasForeignKey("SubInterestId");
                });

            modelBuilder.Entity("Data.Entities.CourseTargetedFinal", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("CourseTargetedFinals")
                        .HasForeignKey("CourseId");

                    b.HasOne("Data.Entities.MajorInterest", "MajorInterest")
                        .WithMany("CourseTargetedFinals")
                        .HasForeignKey("MajorInterestId");

                    b.HasOne("Data.Entities.SubInterest", "SubInterest")
                        .WithMany("CourseTargetedFinals")
                        .HasForeignKey("SubInterestId");
                });

            modelBuilder.Entity("Data.Entities.DevelopCourse", b =>
                {
                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("DevelopCourses")
                        .HasForeignKey("LecturerId");

                    b.HasOne("Data.Entities.ProfferStatu", "ProfferStatu")
                        .WithMany("DevelopCourses")
                        .HasForeignKey("ProfferStatuId");

                    b.HasOne("Data.Entities.SectorSupervisor", "SectorSupervisor")
                        .WithMany("DevelopCourses")
                        .HasForeignKey("SectorSupervisorId");
                });

            modelBuilder.Entity("Data.Entities.Field", b =>
                {
                    b.HasOne("Data.Entities.Sector", "Sector")
                        .WithMany("Fields")
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("Data.Entities.Finance", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("Finances")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("Finances")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Data.Entities.GM", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("GMs")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("GMs")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Data.Entities.Inquiry", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("Inquiries")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("Data.Entities.Lecturer", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("Lecturers")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("Lecturers")
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.Entities.Lecturer", "Lecturer1")
                        .WithMany()
                        .HasForeignKey("LecturerId1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Data.Entities.Lecturer", "Lecturer2")
                        .WithMany()
                        .HasForeignKey("LecturerId2")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Data.Entities.Nationality", "Nationality")
                        .WithMany("Lecturers")
                        .HasForeignKey("NationalityId");

                    b.HasOne("Data.Entities.NumberType", "NumberType")
                        .WithMany("Lecturers")
                        .HasForeignKey("NumberTypeId");

                    b.HasOne("Data.Entities.Sex", "Sex")
                        .WithMany("Lecturers")
                        .HasForeignKey("SexId");
                });

            modelBuilder.Entity("Data.Entities.LecturerCertificate", b =>
                {
                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("LecturerCertificates")
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("Data.Entities.LecturerInterestedCourse", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("LecturerInterestedCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("LecturerInterestedCourses")
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("Data.Entities.LecturerInterestedCourseTemp", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("LecturerInterestedCourseTemps")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("Data.Entities.LecturerQualification", b =>
                {
                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("LecturerQualifications")
                        .HasForeignKey("LecturerId");

                    b.HasOne("Data.Entities.QualificationDefine", "QualificationDefine")
                        .WithMany("LecturerQualifications")
                        .HasForeignKey("QualificationDefineId");
                });

            modelBuilder.Entity("Data.Entities.LecturerQualificationTemp", b =>
                {
                    b.HasOne("Data.Entities.QualificationDefine", "QualificationDefine")
                        .WithMany("LecturerQualificationTemps")
                        .HasForeignKey("QualificationDefineId");
                });

            modelBuilder.Entity("Data.Entities.LecturerUser", b =>
                {
                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("LecturerUsers")
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("Data.Entities.LocationRoom", b =>
                {
                    b.HasOne("Data.Entities.CoordinatorLocation", "CoordinatorLocation")
                        .WithMany("LocationRooms")
                        .HasForeignKey("CoordinatorLocationId");
                });

            modelBuilder.Entity("Data.Entities.LocationRoomImage", b =>
                {
                    b.HasOne("Data.Entities.LocationRoom", "LocationRoom")
                        .WithMany("LocationRoomImages")
                        .HasForeignKey("LocationRoomId");
                });

            modelBuilder.Entity("Data.Entities.Organization", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("Organizations")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("Organizations")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Data.Entities.OrganizationCourseRequest", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("OrganizationCourseRequests")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("OrganizationCourseRequests")
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("OrganizationCourseRequests")
                        .HasForeignKey("CourseId");

                    b.HasOne("Data.Entities.Organization", "Organization")
                        .WithMany("OrganizationCourseRequests")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Data.Entities.OrganizationCourseRequestTrainer", b =>
                {
                    b.HasOne("Data.Entities.OrganizationCourseRequest", "OrganizationCourseRequest")
                        .WithMany("OrganizationCourseRequestTrainers")
                        .HasForeignKey("OrganizationCourseRequestId");

                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany("OrganizationCourseRequestTrainers")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.OrganizationCourseRequestTrainerTemp", b =>
                {
                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany("OrganizationCourseRequestTrainerTemps")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.OrganizationOfficer", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("OrganizationOfficers")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("OrganizationOfficers")
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.Entities.Organization", "Organization")
                        .WithMany("OrganizationOfficers")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Data.Entities.PMP", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("PMPs")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("PMPs")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Data.Entities.Provider", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("Providers")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("Providers")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Data.Entities.ProviderAccreditation", b =>
                {
                    b.HasOne("Data.Entities.Provider", "Provider")
                        .WithMany("ProviderAccreditations")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Data.Entities.ProviderCourse", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("ProviderCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("Data.Entities.Provider", "Provider")
                        .WithMany("ProviderCourses")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Data.Entities.ProviderField", b =>
                {
                    b.HasOne("Data.Entities.Provider", "Provider")
                        .WithMany("ProviderFields")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.RegistrationCourseProffer", b =>
                {
                    b.HasOne("Data.Entities.CourseProffer", "CourseProffer")
                        .WithMany("RegistrationCourseProffers")
                        .HasForeignKey("CourseProfferId");

                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany("RegistrationCourseProffers")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.RegistrationSuggestionCourse", b =>
                {
                    b.HasOne("Data.Entities.Field", "Field")
                        .WithMany("RegistrationSuggestionCourses")
                        .HasForeignKey("FieldId");

                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("RegistrationSuggestionCourses")
                        .HasForeignKey("LecturerId");

                    b.HasOne("Data.Entities.Sector", "Sector")
                        .WithMany("RegistrationSuggestionCourses")
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("Data.Entities.RegistrationSuggestionCourseTemp", b =>
                {
                    b.HasOne("Data.Entities.Field", "Field")
                        .WithMany("RegistrationSuggestionCourseTemps")
                        .HasForeignKey("FieldId");

                    b.HasOne("Data.Entities.Sector", "Sector")
                        .WithMany("RegistrationSuggestionCourseTemps")
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("Data.Entities.SSectorList", b =>
                {
                    b.HasOne("Data.Entities.Sector", "Sector")
                        .WithMany("SSectorLists")
                        .HasForeignKey("SectorId");

                    b.HasOne("Data.Entities.SectorSupervisor", "SectorSupervisor")
                        .WithMany("SSectorLists")
                        .HasForeignKey("SectorSupervisorId");
                });

            modelBuilder.Entity("Data.Entities.SectorSupervisor", b =>
                {
                    b.HasOne("Data.Entities.NumberType", "NumberType")
                        .WithMany("SectorSupervisors")
                        .HasForeignKey("NumberTypeId");
                });

            modelBuilder.Entity("Data.Entities.SectorSupervisorCertificate", b =>
                {
                    b.HasOne("Data.Entities.SectorSupervisor", "SectorSupervisor")
                        .WithMany("SectorSupervisorCertificates")
                        .HasForeignKey("SectorSupervisorId");
                });

            modelBuilder.Entity("Data.Entities.SectorSupervisorInstitution", b =>
                {
                    b.HasOne("Data.Entities.SectorSupervisor", "SectorSupervisor")
                        .WithMany("SectorSupervisorInstitutions")
                        .HasForeignKey("SectorSupervisorId");
                });

            modelBuilder.Entity("Data.Entities.SectorSupervisorInstitutionDetail", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("SectorSupervisorInstitutionDetails")
                        .HasForeignKey("CourseId");

                    b.HasOne("Data.Entities.SectorSupervisor", "SectorSupervisor")
                        .WithMany("SectorSupervisorInstitutionDetails")
                        .HasForeignKey("SectorSupervisorId");

                    b.HasOne("Data.Entities.SectorSupervisorInstitution", "SectorSupervisorInstitution")
                        .WithMany("SectorSupervisorInstitutionDetails")
                        .HasForeignKey("SectorSupervisorInstitutionId");
                });

            modelBuilder.Entity("Data.Entities.SelectedLecturer", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("SelectedLecturers")
                        .HasForeignKey("CourseId");

                    b.HasOne("Data.Entities.CourseProffer", "CourseProffer")
                        .WithMany("SelectedLecturers")
                        .HasForeignKey("CourseProfferId");

                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("SelectedLecturers")
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("Data.Entities.SelectedLecturerTemp", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("SelectedLecturerTemps")
                        .HasForeignKey("CourseId");

                    b.HasOne("Data.Entities.CourseProffer", "CourseProffer")
                        .WithMany("SelectedLecturerTemps")
                        .HasForeignKey("CourseProfferId");

                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("SelectedLecturerTemps")
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("Data.Entities.Slideshow", b =>
                {
                    b.HasOne("Data.Entities.btnType", "btnType")
                        .WithMany("Slideshows")
                        .HasForeignKey("btnTypeId");
                });

            modelBuilder.Entity("Data.Entities.SubInterest", b =>
                {
                    b.HasOne("Data.Entities.MajorInterest", "MajorInterest")
                        .WithMany("SubInterests")
                        .HasForeignKey("MajorInterestId");
                });

            modelBuilder.Entity("Data.Entities.TaskNote", b =>
                {
                    b.HasOne("Data.Entities.MyTask", "MyTask")
                        .WithMany("TaskNotes")
                        .HasForeignKey("MyTaskId");
                });

            modelBuilder.Entity("Data.Entities.TaskProgress", b =>
                {
                    b.HasOne("Data.Entities.CourseProffer", "CourseProffer")
                        .WithMany("TaskProgresses")
                        .HasForeignKey("CourseProfferId");

                    b.HasOne("Data.Entities.Finance", "Finance")
                        .WithMany("TaskProgresses")
                        .HasForeignKey("FinanceId");

                    b.HasOne("Data.Entities.GM", "GM")
                        .WithMany("TaskProgresses")
                        .HasForeignKey("GMId");

                    b.HasOne("Data.Entities.Lecturer", "Lecturer")
                        .WithMany("TaskProgresses")
                        .HasForeignKey("LecturerId");

                    b.HasOne("Data.Entities.PMP", "PMP")
                        .WithMany("TaskProgresses")
                        .HasForeignKey("PMPId");
                });

            modelBuilder.Entity("Data.Entities.Trainer", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("Trainers")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("Trainers")
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.Entities.Nationality", "Nationality")
                        .WithMany("Trainers")
                        .HasForeignKey("NationalityId");

                    b.HasOne("Data.Entities.NumberType", "NumberType")
                        .WithMany("Trainers")
                        .HasForeignKey("NumberTypeId");

                    b.HasOne("Data.Entities.Sex", "Sex")
                        .WithMany("Trainers")
                        .HasForeignKey("SexId");
                });

            modelBuilder.Entity("Data.Entities.TrainerInquiry", b =>
                {
                    b.HasOne("Data.Entities.CourseProffer", "CourseProffer")
                        .WithMany("TrainerInquiries")
                        .HasForeignKey("CourseProfferId");

                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany("TrainerInquiries")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.TrainerInterested", b =>
                {
                    b.HasOne("Data.Entities.MajorInterest", "MajorInterest")
                        .WithMany("TrainerInteresteds")
                        .HasForeignKey("MajorInterestId");

                    b.HasOne("Data.Entities.SubInterest", "SubInterest")
                        .WithMany("TrainerInteresteds")
                        .HasForeignKey("SubInterestId");

                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany("TrainerInteresteds")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.TrainerInterestedCourse", b =>
                {
                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany("TrainerInterestedCourses")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.TrainerInterestedTemp", b =>
                {
                    b.HasOne("Data.Entities.MajorInterest", "MajorInterest")
                        .WithMany("TrainerInterestedTemps")
                        .HasForeignKey("MajorInterestId");

                    b.HasOne("Data.Entities.SubInterest", "SubInterest")
                        .WithMany("TrainerInterestedTemps")
                        .HasForeignKey("SubInterestId");
                });

            modelBuilder.Entity("Data.Entities.TrainerOtherInterestedCourse", b =>
                {
                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany("TrainerOtherInterestedCourses")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.TrainerUser", b =>
                {
                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany("TrainerUsers")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.TrineeCourseRequest", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany("TrineeCourseRequests")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("TrineeCourseRequests")
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("TrineeCourseRequests")
                        .HasForeignKey("CourseId");

                    b.HasOne("Data.Entities.Trainer", "Trainer")
                        .WithMany("TrineeCourseRequests")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Data.Entities.albumList", b =>
                {
                    b.HasOne("Data.Entities.album", "album")
                        .WithMany("albumLists")
                        .HasForeignKey("albumId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AkfnyData.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AkfnyData.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkfnyData.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AkfnyData.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
